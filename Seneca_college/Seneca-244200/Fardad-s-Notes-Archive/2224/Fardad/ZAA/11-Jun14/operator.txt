
1- The operator must exist to be overload
2- The nature of the operator matches the
   action or is suitable for it or it 
   makes sense to create a new meaning 
   for it.
3- Can I implement the operator as a 
   method of you can't then it will 
   be a helper
4- What is the signature of the 
   operator (without considering 
   references or being constant)
5- Based on the business logic (the 
   requirement and nature of the operator)
   change types to reference and make 
   them constant if needed.

the "type" could be compound (i.e. class) or primitive (i.e int, double, etc.)
typeA TA;
typeB TB;
typeC TC;

TA = TB @ TC;
Binary:
   Method:
   typeA typeB::operator@(typeC);
   TC is not changed:
      typeA typeB::operator@(const typeC&);
   TB is not changed:
      typeA typeB::operator@(typeC)const;
   TA is not A copy
      typeA& typeB::operator@(typeC);
   TA is not A copy and can not change
      const typeA& typeB::operator@(typeC);
   HELPER:
   typeA operator@(typeB left, typeC right);
   TC is not changed:
      typeA operator@(typeB left,const typeC& right);
   TB is not changed:
      typeA operator@(const typeB& left, typeC right);
   TA is not A copy
      typeA& operator@(typeB left, typeC right);
   TA is not A copy and can not change
      const typeA& operator@(typeB left, typeC right);
   
   example
   typeA operator@(const typeB& left, const typeC& right);

   Employee A;

   cout << A << endl;

   ostream& opeator<<(ostream& ostr, const Emplyee& right);

Unary: 
typeA TA;
typeB TB;

TA = @TB;
   Method:
   typeA typeB::operator@();
   TB is not changed
      typeA typeB::operator@()const;
   TA is not a copy
      typeA& typeB::operator@()const;
   TA is not a copy and will not change
      const typeA& typeB::operator@()const;
   HELPER
   typeA operator@(type B);
   TB is changed
      typeA operator@(type& B);
   TB is not changed
      typeA operator@(const type& B);
   TA is not a copy
      typeA& operator@(const type& B);
   TA is not a copy and will not change
      const typeA& operator@(const type& B);

TA = TB@; // only ++ and --
Unary:
   Member
   typeA typeB::operator@(int); // the int is a flag to set this operator as post fix it
                                // has nothing to do with an argument with type of int
   non-member

Friendship (avoid at all time)