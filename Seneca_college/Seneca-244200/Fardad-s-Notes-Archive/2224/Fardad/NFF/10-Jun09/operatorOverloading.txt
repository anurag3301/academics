1- The operator must exist to be overload (syntax)
2- The nature of the operator matches the   (concept)
   action or is suitable for it or it 
   makes sense to create a new meaning 
   for it.
3- Can I implement the operator as a 
   method (member func)?  if you really 
   can't then it will be a helper (stand 
   online)
4- What is the signature of the 
   operator (without considering 
   references or being constant)
5- Based on the business logic (the 
   requirement and nature of the operator)
   change types to reference and make 
   them constant if needed.

the "type?" could be compound (i.e. class) or primitive (i.e int, double, etc.)
typeA TA;
typeB TB;
typeC TC;

TA = TB @ TC;
Binary:
   Method:
   typeA typeB::operator@(typeC C);  // genral signature of the operator
   TC is not changed:
      typeA typeB::operator@(const typeC& C);
   TB is not changed:
      typeA typeB::operator@(const typeC& C)const;
   TB is not changed but TC is:
      typeA typeB::operator@(typeC& C)const;
   TA is not A copy and can not change
      const typeA& typeB::operator@(typeC C);
   HELPER:
   typeA operator@(typeB left, typeC right);  // genral 
      TC is not changed and typeB is a primitive (int, double, float)
         typeA operator@(typeB left,const typeC& right);
      both TB and TC are not changed:
         typeA operator@(const typeB& left,const typeC& right);
      TB is not changed but TC is:
         typeA operator@(const typeB& left, typeC& right);
      TA is not A copy and can not change
         const typeA& operator@(typeB& left, typeC& right);

Unary:
typeA TA;
typeB TB;

TA = @TB;
   Method:
   typeA typeB::operator@();
   TB is not changed
      typeA typeB::operator@()const;
   TA is not a copy
      typeA& typeB::operator@()const;
   TA is not a copy and will not change
      const typeA& typeB::operator@()const;
   HELPER:
   typeA operator@(typeB B)
   TB is changed
      typeA operator@(type& B);
   TB is not changed
      typeA operator@(const type& B);
   TA is not a copy
      typeA& operator@(const type& B);
   TA is not a copy and will not change
      const typeA& operator@(const type& B);

TA  = TB@;   // only for ++ and --
   typeA typeB::operator@(int);// int only is a flag
                         // to indicate that the oper
                         // is a postfix one